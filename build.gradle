buildscript {
    ext {
        springBootVersion = '2.5.8'
        set('springCloudVersion', "2020.0.5")
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:4.0.0"
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.5.8'
    id "org.sonarqube" version "3.3"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
// apply plugin: 'net.saliman.cobertura'
apply plugin: 'jacoco'

sonarqube {
    properties {
        property "systemProp.sonar.host.url", ""
        property "systemProp.sonar.jdbc.url", ""
        property "systemProp.sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.projectName", "scsb-etl"
        property "systemProp.sonar.jdbc.username", ""
        property "systemProp.sonar.jdbc.password", ""
    }
}

//added to accept systemproperties while executing gradlew test cmd
test {
    systemProperties = System.properties
}

jar {
    archiveBaseName = 'phase4-scsb-etl'
    archiveVersion = '0.0.1-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}


dependencies {
    implementation fileTree(dir: '/data/commonjar', include: '*2.2.jar')
    implementation('org.apache.camel.springboot:camel-spring-boot-starter:3.14.0')
    implementation('org.apache.camel.springboot:camel-spring-boot-dependencies:3.14.0')
    implementation('org.apache.camel:camel-activemq:3.14.0')
    implementation('org.apache.camel:camel-ftp:3.14.0')
    implementation('org.apache.camel:camel-csv:3.14.0')
    implementation('org.apache.camel:camel-bindy:3.14.0')
    implementation('org.apache.camel:camel-mail:3.14.0')
    implementation('org.apache.camel:camel-stream:3.14.0')
    implementation('org.apache.camel:camel-jaxb:3.14.0')
    implementation('org.apache.camel:camel-zipfile:3.14.0')
    implementation('org.apache.camel:camel-jms:3.14.0')
    implementation('org.apache.camel.springboot:camel-aws-s3-starter:3.8.0')
    implementation('org.apache.camel:camel-aws-s3:3.8.0')

    implementation('org.apache.commons:commons-csv:1.9.0')
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    implementation('org.apache.activemq:activemq-camel:5.16.2')
    implementation('org.apache.activemq:activemq-pool:5.16.2')
    implementation('org.apache.activemq:activemq-broker:5.16.2')
    implementation('org.apache.activemq:activemq-client:5.16.2')

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web-services')

    implementation('com.google.guava:guava:31.0.1-jre')
    implementation('commons-io:commons-io:2.11.0')
    implementation('commons-beanutils:commons-beanutils:1.9.4')
    implementation('info.freelibrary:freelib-marc4j:2.6.12')
    implementation('javax.validation:validation-api:2.0.1.Final')


    implementation 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.26'
    implementation('org.codehaus.jettison:jettison:1.4.1')

    implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'

    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
    implementation group: 'org.json', name: 'json', version: '20211205'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    implementation('io.springfox:springfox-swagger-ui:2.9.2')
    implementation('io.springfox:springfox-boot-starter:3.0.0')

}

//configurations.all {
//    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//        if (details.requested.group == 'org.apache.logging.log4j') {
//            details.useVersion '2.17.0'
//        }
//    }
//}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}


jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

task scsbEtlJavadocs(type: Javadoc) {
    source = sourceSets.main.java
    classpath = configurations.implementation
    options.addStringOption('Xdoclint:none', '-quiet')
    String home = System.getProperty("user.home")
    destinationDir = new File(home + "/scsb-javadocs/scsb-etl")
}



jar {
    enabled = false
    archiveClassifier = '' //use empty string
}
